@page "/Sender"
@inject IHttpClientFactory HttpClientFactory
@using System.Text.Json
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

<PageTitle>Sender</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Sender Management</h1>

    <div class="row">
        <div class="col-md-6">
            <h2 class="mb-3">Create New Sender</h2>
            <EditForm Model="@newSender" OnValidSubmit="CreateSender" class="mb-4">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="mb-3">
                    <label for="sendercode" class="form-label">SenderCode:</label>
                    <InputText id="senderCode" @bind-Value="newSender.SenderCode" class="form-control"/>
                </div>
                <div class="mb-3">
                    <label for="machinecode" class="form-label">MachineCode:</label>
                    <InputText id="machinecode" @bind-Value="newSender.MachineCode" class="form-control"/>

                </div>
                <div class="mb-3">
                    <label for="drivercode" class="form-label">DriverCode:</label>
                    <InputText id="driverCode" @bind-Value="newSender.DriverCode" class="form-control"/>
                </div>
                <div class="mb-3">
                    <label for="sendertype" class="form-label">SenderType:</label>
                    <InputSelect id="senderType" @bind-Value="newSender.SenderType" class="form-control">
                        <option value="1">Dk</option>
                        <option value="10">InfluxDB</option>
                        <option value="20">InfluxDB2</option>
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="optionsConf" class="form-label">Options:</label>
                    <label for="optionsConf" class="form-label">urlInput:</label>
                    <InputText id="url" @bind-Value="urlInput" class="form-control"/>
                    <label for="optionsConf" class="form-label">esnInput:</label>
                    <InputText id="esnInput" @bind-Value="esnInput" class="form-control"/>
                    <label for="optionsConf" class="form-label">controlInput:</label>
                    <InputText id="controlInput" @bind-Value="controlInput" class="form-control"/>
                </div>
                <div class="mb-3">
                    <label for="desc" class="form-label">Desc:</label>
                    <InputText id="desc" @bind-Value="newSender.Desc" class="form-control"/>
                </div>

                <button type="submit" class="btn btn-primary">Create Sender</button>
            </EditForm>
        </div>

        <div class="col-md-6">
            <h2 class="mb-3">Sender List</h2>
            <button @onclick="LoadSenders" class="btn btn-primary mb-3">Refresh Senders</button>
            @if (senders != null && senders.Any())
            {
                <div class="list-group">
                    @foreach (var sender in senders)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="mb-1">@sender.SenderCode</h5>
                                <p class="mb-1">@sender.MachineCode</p>
                                <p class="mb-1">@sender.DriverCode</p>
                                <p class="mb-1">@sender.SenderType</p>
                                <p class="mb-1">@JsonConvert.SerializeObject(sender.Options)</p>
                                <p class="mb-1">@sender.Desc</p>
                            </div>
                            <button @onclick="() => DeleteSender(sender.Id)" class="btn btn-link text-danger">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No senders found.</p>
            }
        </div>
    </div>
</div>

@code {
    private SenderRequest newSender = new();
    private List<SenderResponse> senders;
    private HttpClient httpClient;
    private string urlInput;
    private string esnInput;
    private string controlInput;

    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient("ContentPlatform.Api");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSenders();
    }

    private async Task CreateSender()
    {
        newSender.Options = new Dictionary<string, string>();
        newSender.Options.Add("Url",urlInput);
        newSender.Options.Add("ESN",esnInput);
        newSender.Options.Add("Control",controlInput);
        var response = await httpClient.PostAsJsonAsync("/api/senders", newSender);
        if (response.IsSuccessStatusCode)
        {
            // Clear the form
            newSender = new();
            urlInput = "";
            esnInput = "";
            controlInput = "";
            // Refresh the sender list
            await LoadSenders();
        }
        else
        {
            // Handle error - you might want to display an error message
        }
    }

    private async Task LoadSenders()
    {
        var response = await httpClient.GetAsync("/api/senders");
        if (response.IsSuccessStatusCode)
        {
            senders = await response.Content.ReadFromJsonAsync<List<SenderResponse>>();
        }
        else
        {
            // Handle error - you might want to display an error message
            senders = new List<SenderResponse>();
        }
    }

    private async Task DeleteSender(Guid id)
    {
        var response = await httpClient.DeleteAsync($"/api/senders/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadSenders();
        }
        else
        {
            // Handle error - you might want to display an error message
        }
    }

    public class SenderRequest
    {
        public string SenderCode { get; set; }
        public string? MachineCode { get; set; }
        public string? DriverCode { get; set; }
        public int SenderType { get; set; }
        public Dictionary<string,string> Options { get; set; }
        public string? Desc { get; set; }
    }

    public class SenderResponse
    {
        public Guid Id { get; set; }
        public string SenderCode { get; set; }
        public string? MachineCode { get; set; }
        public string? DriverCode { get; set; }
        public int SenderType { get; set; }
        public Dictionary<string,string> Options { get; set; }
        public string? Desc { get; set; }
    }

}
